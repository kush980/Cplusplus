#include<iostream>
#include<vector>
using namespace std;

void print(vector<int> v)
{
    for(auto x:v)
    {
        cout<<x<<" ";
    }
    cout<<endl;
}

//O(NLogN)
void buildHeap(vector<int> &v)
{
    for(int i=2;i<v.size();i++)
    {
        int idx=i;
        int parent = i/2;
        while(idx>1 && v[idx]>v[parent])
        {
            swap(v[idx],v[parent]);
            idx = parent;
            parent = parent / 2;
        }
    }
}

bool minHeap = false;
bool compare(int a,int b)
{
    if(minHeap)
    {
        return a < b;
    }
   else
   {
        return a > b;
   }
}

void heapify(vector<int> &v,int idx,int size)
    {
        int left = 2*idx;
        int right = left + 1;

        int min_idx = idx;
        int last = size - 1;

        if(left<=last && compare(v[left],v[idx]))
        {
            min_idx = left;
        }
        if(right<=last && compare(v[right],v[min_idx]))
        {
            min_idx = right;
        }

        if(min_idx!=idx)
        {
            swap(v[idx],v[min_idx]);
            heapify(v,min_idx,size);
        }
    }

void heapsort(vector<int> &v)
{
    buildHeap(v);
    int n = v.size();

    while(n>1)
    {
        swap(v[1],v[n-1]);
        n--;
        heapify(v,1,n);
    }
}

int main()
{
    vector<int> v;
    v.push_back(-1);
    int n;
    cin>>n;
    int no;

    for(int i=1;i<=n;i++)
    {
        cin>>no;
        v.push_back(no);
    }
    heapsort(v);
    print(v);

    return 0;
}
